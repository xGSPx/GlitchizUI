--[[
    GlitchizUI v2.0 (Modern Redesign)
    A feature-rich, modern UI library with a unique "glitchy" aesthetic.
    Redesigned for a clean, stylish, and futuristic look.
--]]

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local Library = {}
Library.__index = Library

-- // Modern Theme Configuration
local Theme = {
    Background = Color3.fromRGB(20, 18, 28),      -- Dark Purple/Black
    Header = Color3.fromRGB(45, 35, 65),          -- Darker, muted purple
    Accent = Color3.fromRGB(110, 70, 220),        -- Main vibrant purple
    Accent2 = Color3.fromRGB(0, 240, 255),        -- Neon Blue
    Text = Color3.fromRGB(255, 255, 255),         -- White
    Font = Enum.Font.SourceSans,
    BoldFont = Enum.Font.SourceSansBold,
    TextSize = 14,
}

-- // Utility Functions
local function Create(instanceType, properties)
    local inst = Instance.new(instanceType)
    for prop, value in pairs(properties or {}) do
        inst[prop] = value
    end
    return inst
end

local function MakeDraggable(object, handle)
    local dragging = false
    local dragStart, startPos

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = object.Position
            local conn
            conn = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    conn:Disconnect()
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            object.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- // Main Window Constructor
function Library.new(props)
    local self = setmetatable({}, Library)
    self.Title = props.Title or "GlitchizUI"
    self.Size = props.Size or UDim2.new(0, 550, 0, 350)
    self.Tabs = {}

    -- // Main ScreenGui
    self.ScreenGui = Create("ScreenGui", {
        Name = "GlitchizUI_ScreenGui",
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Parent = CoreGui
    })

    -- // Main Frame
    self.MainFrame = Create("Frame", {
        Name = "MainFrame",
        Size = self.Size,
        Position = props.Position or UDim2.new(0.5, -self.Size.X.Offset / 2, 0.5, -self.Size.Y.Offset / 2),
        BackgroundColor3 = Theme.Background,
        BackgroundTransparency = 0.15,
        BorderSizePixel = 0,
        Parent = self.ScreenGui
    })
    Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = self.MainFrame })
    Create("UIStroke", { Color = Theme.Accent2, Transparency = 0.7, Thickness = 1.5, Parent = self.MainFrame })

    -- // Header
    local Header = Create("Frame", {
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = Theme.Header,
        BackgroundTransparency = 0.2,
        BorderSizePixel = 0,
        Parent = self.MainFrame
    })

    -- // Title Label
    Create("TextLabel", {
        Name = "Title", Size = UDim2.new(1, -80, 1, 0), Position = UDim2.new(0, 15, 0, 0),
        Text = self.Title, Font = Theme.BoldFont, TextSize = Theme.TextSize + 4,
        TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = Header
    })
    
    -- // Control Buttons
    local Controls = Create("Frame", { Name = "Controls", Size = UDim2.new(0, 60, 1, 0), Position = UDim2.new(1, -60, 0, 0), BackgroundTransparency = 1, Parent = Header })
    local HideButton = Create("TextButton", { Name = "HideButton", Size = UDim2.new(0, 30, 1, 0), BackgroundColor3 = Theme.Header, Text = "—", Font = Theme.BoldFont, TextSize = 16, TextColor3 = Theme.Text, Parent = Controls })
    local DeleteButton = Create("TextButton", { Name = "DeleteButton", Size = UDim2.new(0, 30, 1, 0), Position = UDim2.new(0, 30, 0, 0), BackgroundColor3 = Theme.Header, Text = "✕", Font = Theme.BoldFont, TextSize = 16, TextColor3 = Theme.Text, Parent = Controls })
    
    -- // Content Container
    local ContentContainer = Create("Frame", { Name = "ContentContainer", Size = UDim2.new(1, 0, 1, -40), Position = UDim2.new(0, 0, 0, 40), BackgroundTransparency = 1, Parent = self.MainFrame })
    self.TabButtonsFrame = Create("Frame", { Name = "TabButtonsFrame", Size = UDim2.new(0, 120, 1, 0), BackgroundColor3 = Theme.Background, BackgroundTransparency = 0.3, BorderSizePixel = 0, Parent = ContentContainer })
    Create("UIListLayout", { FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), HorizontalAlignment = Enum.HorizontalAlignment.Center, Parent = self.TabButtonsFrame })
    self.ContentFrame = Create("Frame", { Name = "ContentFrame", Size = UDim2.new(1, -120, 1, 0), Position = UDim2.new(0, 120, 0, 0), BackgroundTransparency = 1, BorderSizePixel = 0, Parent = ContentContainer })

    MakeDraggable(self.MainFrame, Header)

    local isContentVisible = true
    HideButton.MouseButton1Click:Connect(function()
        isContentVisible = not isContentVisible
        ContentContainer.Visible = isContentVisible
        self.MainFrame:TweenSize(isContentVisible and self.Size or UDim2.new(self.Size.X.Scale, self.Size.X.Offset, 0, 40), "Out", "Quad", 0.2, true)
        HideButton.Text = isContentVisible and "—" or "+"
    end)
    DeleteButton.MouseButton1Click:Connect(function() self:Destroy() end)

    function self:AddTab(name)
        if self.CurrentTab then self.CurrentTab.Frame.Visible = false; self.CurrentTab.Indicator.Visible = false; self.CurrentTab.Button.BackgroundColor3 = Theme.Header; end
        local Tab = { ElementOffset = 15 }
        Tab.Button = Create("TextButton", { Name = name, Size = UDim2.new(1, -10, 0, 30), Text = name, Font = Theme.BoldFont, TextSize = Theme.TextSize, TextColor3 = Theme.Text, BackgroundColor3 = Theme.Accent, BorderSizePixel = 0, LayoutOrder = #self.Tabs + 1, Parent = self.TabButtonsFrame })
        Create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = Tab.Button })
        Tab.Indicator = Create("Frame", { Name = "Indicator", Size = UDim2.new(0, 3, 0.6, 0), Position = UDim2.new(0, 0, 0.2, 0), BackgroundColor3 = Theme.Accent2, BorderSizePixel = 0, Parent = Tab.Button })
        Create("UICorner", { Parent = Tab.Indicator })
        Tab.Frame = Create("ScrollingFrame", { Name = name .. "_Content", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, BorderSizePixel = 0, CanvasSize = UDim2.new(0, 0, 0, 0), ScrollBarImageColor3 = Theme.Accent2, ScrollBarThickness = 4, Parent = self.ContentFrame })
        local UIList = Create("UIListLayout", { FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 10), HorizontalAlignment = Enum.HorizontalAlignment.Center, Parent = Tab.Frame })
        Tab.Button.MouseButton1Click:Connect(function() if self.CurrentTab then self.CurrentTab.Frame.Visible = false; self.CurrentTab.Button.BackgroundColor3 = Theme.Header; self.CurrentTab.Indicator.Visible = false; end; Tab.Frame.Visible = true; Tab.Button.BackgroundColor3 = Theme.Accent; Tab.Indicator.Visible = true; self.CurrentTab = Tab; end)
        self.Tabs[name] = Tab; self.CurrentTab = Tab; return self
    end
    
    function self:AddElement(height)
        if not self.CurrentTab then warn("GlitchizUI: No tab created."); return end
        local tab = self.CurrentTab
        local elementFrame = Create("Frame", { Size = UDim2.new(1, -30, 0, height), BackgroundTransparency = 1, LayoutOrder = tab.ElementOffset, Parent = tab.Frame })
        tab.ElementOffset = tab.ElementOffset + height + 10; tab.Frame.CanvasSize = UDim2.new(0, 0, 0, tab.ElementOffset)
        return elementFrame
    end

    function self:AddButton(props)
        local frame = self:AddElement(35); local btn = Create("TextButton", { Name = "Button", Size = UDim2.new(1, 0, 1, 0), Text = props.Text or "Button", Font = Theme.Font, TextSize = Theme.TextSize, TextColor3 = Theme.Text, BackgroundColor3 = Theme.Header, Parent = frame }); Create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = btn }); Create("UIStroke", { Color = Theme.Accent, Parent = btn }); if props.Callback then btn.MouseButton1Click:Connect(function() pcall(props.Callback) end) end; return {}
    end

    function self:AddToggle(props)
        local frame = self:AddElement(25); local obj = { Value = props.Default or false }; local label = Create("TextLabel", { Name = "Label", Size = UDim2.new(1, -35, 1, 0), Position = UDim2.new(0, 35, 0, 0), Text = props.Text or "Toggle", Font = Theme.Font, TextSize = Theme.TextSize, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = frame }); local box = Create("TextButton", { Name = "Toggle", Size = UDim2.new(0, 25, 0, 25), Position = UDim2.new(0, 0, 0.5, 0), AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = Theme.Header, Text = "", Parent = frame }); Create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = box }); Create("UIStroke", { Color = Theme.Accent, Parent = box }); local mark = Create("Frame", { Name = "Checkmark", Size = UDim2.new(0.6, 0, 0.6, 0), Position = UDim2.new(0.5, 0, 0.5, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Theme.Accent2, Visible = obj.Value, Parent = box }); Create("UICorner", { CornerRadius = UDim.new(0, 2), Parent = mark }); box.MouseButton1Click:Connect(function() obj.Value = not obj.Value; mark.Visible = obj.Value; if props.Callback then pcall(props.Callback, obj.Value) end end); return obj
    end

    function self:AddTextbox(props)
        local frame = self:AddElement(35); local obj = {}; local box = Create("TextBox", { Name = "Textbox", Size = UDim2.new(1, 0, 1, 0), Text = props.Default or "", PlaceholderText = props.Placeholder or "...", Font = Theme.Font, TextSize = Theme.TextSize, TextColor3 = Theme.Text, BackgroundColor3 = Theme.Header, ClearTextOnFocus = props.ClearOnFocus or false, Parent = frame }); Create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = box }); Create("UIStroke", { Color = Theme.Accent, Parent = box }); box.FocusLost:Connect(function(enter) if enter and props.Callback then pcall(props.Callback, box.Text) end end); function obj:GetText() return box.Text end; function obj:SetText(t) box.Text = t end; return obj
    end
    
    function self:AddLabel(props)
        local frame = self:AddElement(20); local obj = {}; local label = Create("TextLabel", { Name = "Label", Size = UDim2.new(1, 0, 1, 0), Text = props.Text or "Label", Font = props.Bold and Theme.BoldFont or Theme.Font, TextSize = props.Big and Theme.TextSize + 4 or Theme.TextSize, TextColor3 = props.Color or Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = frame }); function obj:Set(t) label.Text = t end; return obj
    end

    function self:AddDivider()
        local frame = self:AddElement(8); Create("Frame", { Name = "Divider", Size = UDim2.new(1, 0, 0, 1), Position = UDim2.new(0.5, 0, 0.5, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Theme.Accent, BackgroundTransparency = 0.5, BorderSizePixel = 0, Parent = frame })
    end
    
    function self:AddSlider(props)
        local frame = self:AddElement(45); local obj = {}; local min, max, val = props.Min or 0, props.Max or 100, props.Default or 50; local label = Create("TextLabel", { Name = "Label", Size = UDim2.new(1, 0, 0, 20), Text = (props.Text or "Slider") .. ": " .. math.floor(val), Font = Theme.Font, TextSize = Theme.TextSize, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = frame }); local track = Create("Frame", { Name = "Track", Size = UDim2.new(1, 0, 0, 6), Position = UDim2.new(0, 0, 0, 25), BackgroundColor3 = Theme.Header, Parent = frame }); Create("UICorner", { Parent = track }); local progress = Create("Frame", { Name = "Progress", Size = UDim2.new((val - min) / (max - min), 0, 1, 0), BackgroundColor3 = Theme.Accent2, Parent = track }); Create("UICorner", { Parent = progress }); local handle = Create("Frame", { Name = "Handle", Size = UDim2.new(0, 12, 0, 12), Position = progress.Size.X, AnchorPoint = Vector2.new(0.5, -0.25), BackgroundColor3 = Theme.Text, Parent = progress }); Create("UICorner", {CornerRadius = UDim.new(1,0), Parent = handle}); local drag = false; local function update(input) local pos = input.Position.X - track.AbsolutePosition.X; local perc = math.clamp(pos / track.AbsoluteSize.X, 0, 1); val = min + (max - min) * perc; if props.Callback then pcall(props.Callback, val) end; progress.Size = UDim2.new(perc, 0, 1, 0); handle.Position = UDim2.new(1, 0, 0.5, 0); label.Text = (props.Text or "Slider") .. ": " .. math.floor(val) end; track.InputBegan:Connect(function(i) if i.UserInputType == Enum.UserInputType.MouseButton1 then drag = true; update(i); local conn; conn = UserInputService.InputEnded:Connect(function(e) if e.UserInputType == Enum.UserInputType.MouseButton1 then drag = false; conn:Disconnect() end end) end end); track.InputChanged:Connect(function(i) if drag and i.UserInputType == Enum.UserInputType.MouseMovement then update(i) end end); return obj
    end

    function self:Destroy() self.ScreenGui:Destroy(); for i,v in pairs(self) do self[i] = nil end end
    return self
end

return Library
